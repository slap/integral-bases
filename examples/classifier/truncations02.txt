// 2024-08-14

// cd C:/Users/Santiago/Documents/GitHub/integral-bases

////////////////////////////////////////////////////////////////////////
// We check if we can truncate first in x and then in y


// We compute first the determinacy
// Determinacy = 20
// Delta invariant = 48

LIB "polyclass.lib";
LIB "arnoldgit.lib";
ring R=0,(x,y),ds;
string s = "poly g = " + read("./examples/classifier/santiago2.txt") + ";";
execute(s);
poly gOrig = subst(g, x, x+y);
determinacyBound(gOrig);  // 20

// We truncate up to the determinacy

printlevel = 5;

LIB "integralbasis.lib";
ring R=0,(x,y),dp;

// Original polynomial
string s = "poly g = " + read("./examples/classifier/santiago2.txt") + ";";
execute(s);

// We apply a transformation to make it monic
poly gOrig = subst(g, x, x+y);

// Integral basis of the original polynomial without truncations
gOrig = monic(gOrig);
int t = timer;
list lOrig = integralBasis(gOrig, 2, "atOrigin", "opti1");
"Time for original polynomial: ", timer - t;

// Truncated polynomial
poly gTrunc = g;
gTrunc = reduce(gTrunc, x21);
gTrunc = reduce(gTrunc, y21);

// We apply the same transformation to make it monic
gTrunc = subst(gTrunc, x, x+y);
gTrunc = monic(gTrunc);

// Integral basis for the truncated polynomial
t = timer;
list lTrunc = integralBasis(gTrunc, 2, "atOrigin", "opti1");
"Time for truncated polynomial: ", timer - t;

// To compare both outputs we change to a primer field
ideal IOrig = lOrig[1];
ideal ITrunc = lTrunc[1];
//ITrunc = subst(ITrunc, x, x-y)
//ITruncBack = changeDenom(ITrunc, x-y, x, gOrig);


ring S=32003,(x,y),dp;
poly gOrig = fetch(R, gOrig);
poly gTrunc = fetch(R, gTrunc);
ideal IOrig = fetch(R, IOrig);
ideal ITrunc = fetch(R, ITrunc);
size(reduce(ITrunc, groebner(IOrig + gOrig)));   // Does not give the same output
size(reduce(IOrig, groebner(ITrunc + gOrig)));   // Gives the same output


