cd C:/Users/Santiago/Documents/GitHub/Singular/Singular/LIB

////////////////////////////////////////////////////////////////////////
//
// We study the truncation order for the Puiseux expansions and
// for computing the integral basis
//

printlevel = 3;

LIB"integralbasis.lib";
ring R = 0, (x,y), dp;
poly g = (y11 - x2)*(y13-x3)+y25 + x25;

map phi = R,x+y^2-y^6, y+y^2+y^6;
poly gOrig = phi(g);
gOrig = substitute(gOrig, x, x+y);
gOrig = monic(gOrig);  
//puiseuxList(gOrig, -1, 1, 2);

// We compare the Puiseux expansions
int yDegTrunc = 35;
poly gTrunc = gOrig;
gTrunc = reduce(gTrunc, y^yDegTrunc);
gTrunc = gTrunc + y^(yDegTrunc + 1);
puiseuxList(gTrunc, -1, 1, 2);  // Same Puiseux expansions

// We compare the Puiseux expansions
int yDegTrunc = 25;  // This is the minimum degree we can use for y-truncation
poly gTrunc = gOrig;
gTrunc = reduce(gTrunc, y^yDegTrunc);
gTrunc = gTrunc + y^(yDegTrunc + 1);
puiseuxList(gTrunc, -1, 1, 2);  // Same Puiseux expansions

// We compare the Puiseux expansions
int xDegTrunc = 6;  // This is the minimum degree we can use for x-truncation
poly gTrunc = gOrig;
gTrunc = reduce(gTrunc, x^xDegTrunc);
//gTrunc = gTrunc + y^(yDegTrunc + 1);
puiseuxList(gTrunc, -1, 1, 2);  // Same Puiseux expansions

// We compare the Puiseux expansions
int xDegTrunc = 6;  // This is the minimum degree we can use for x-truncation
int yDegTrunc = 25;  // This is the minimum degree we can use for y-truncation
poly gTrunc = gOrig;
gTrunc = reduce(gTrunc, x^xDegTrunc);
gTrunc = reduce(gTrunc, y^yDegTrunc);
gTrunc = gTrunc + y^(yDegTrunc + 1);
puiseuxList(gTrunc, -1, 1, 2);  // Same Puiseux expansions

////////////////////////////////////////////////////////////////////////
// We now compare the integral basis
// We truncate only in x
////////////////////////////////////////////////////////////////////////

printlevel = 3;

LIB"integralbasis.lib";
ring R = 0, (x,y), dp;
poly g = (y11 - x2)*(y13-x3)+y25 + x25;
map phi = R,x+y^2-y^6, y+y^2+y^6;
poly gOrig = phi(g);
gOrig = substitute(gOrig, x, x+y);
gOrig = monic(gOrig);  

//int t = timer;
//list lOrigY = integralBasis(gOrig, 2, "atOrigin", "opti1", "locBasis");
//"Time for original polynomial: ", timer - t;

// Integral basis for the truncated polynomial
int xDegTrunc = 25;  // This is the minimum degree we can use for x-truncation
poly gTrunc = gOrig;
gTrunc = reduce(gTrunc, x^xDegTrunc);

int t = timer;
list lTrunc = integralBasis(gTrunc, 2, "atOrigin", "opti1", "locBasis");
"Time for truncated polynomial: ", timer - t;


// To compare both outputs we change to a primer field
ideal IOrigY = lOrigY[1];
ideal ITrunc = lTrunc[1];

ring S=32003,(x,y),dp;
poly gOrig = fetch(R, gOrig);
poly gTrunc = fetch(R, gTrunc);
ideal IOrig = fetch(R, IOrigY);
ideal ITrunc = fetch(R, ITrunc);

// We check if we obtain the same output
size(reduce(ITrunc, groebner(IOrig + gOrig)));  
size(reduce(IOrig, groebner(ITrunc + gOrig))); 

setring R;
