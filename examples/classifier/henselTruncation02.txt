// We study up to which degree we can truncate the origianl polynomial
// so that the henselBlocks are correct up to de 

// Not used
//list lOrig = integralBasis(gOrig, 2, "atOrigin", "opti1", "locBasis");


printlevel = 5;
LIB"integralbasis.lib";
ring R = 0, (x,y), dp;
poly g = (y11 - x2)*(y13-x3)+y25 + x25;

map phi = R,x+y^2-y^6, y+y^2+y^6;
poly gOrig = phi(g);

// Original polynomial (no truncation)
gOrig = substitute(gOrig, x, x+y);
gOrig = monic(gOrig);

// Truncated polynomial
int xDegTrunc = 35;  // We truncate at the determinacy
int yDegTrunc = 35;  // 
poly gTrunc = gOrig;
gTrunc = reduce(gTrunc, x^xDegTrunc);
gTrunc = reduce(gTrunc, y^yDegTrunc);
gTrunc = gTrunc + y^(yDegTrunc + 1);

list blocksOrig = henselBlocks(gOrig, 50, 1); // We split up to degree 18, the integrality exponent.
list blocksTrunc = henselBlocks(gTrunc, 50, 1);

// We compare both results
blocksTrunc[2] - blocksOrig[2];  // Same up to degree 19


// Truncated polynomial
int xDegTrunc = 30;  // We truncate below the determinacy
int yDegTrunc = 30;  // 
poly gTrunc = gOrig;
gTrunc = reduce(gTrunc, x^xDegTrunc);
gTrunc = reduce(gTrunc, y^yDegTrunc);
gTrunc = gTrunc + y^(yDegTrunc + 1);

list blocksOrig = henselBlocks(gOrig, 50, 1);
list blocksTrunc = henselBlocks(gTrunc, 50, 1);

// We compare both results
blocksTrunc[2] - blocksOrig[2];   // They are equal only up to degree 15

// What about the Puiseux expansions??

printlevel = 5;
LIB"integralbasis.lib";
ring R = 0, (x,y), dp;
poly g = (y11 - x2)*(y13-x3)+y25 + x25;

map phi = R,x+y^2-y^6, y+y^2+y^6;
poly gOrig = phi(g);

// Original polynomial (no truncation)
gOrig = substitute(gOrig, x, x+y);
gOrig = monic(gOrig);

puiseuxList(gOrig, 20, 1, 2);
