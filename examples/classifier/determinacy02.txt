LIB"integralbasis.lib";
ring R = 0, (x,y), dp;
poly f = (y3 - x2)*(y2-x3)+y6;

// Factor at the origin
poly f0 = subst(f, x, 0);
list fl = divideBy(f0, y);
list fGlob = henselGlobal(y^fl[2], fl[1], f, 10);

list blocksLoc = henselBlocks(fGlob[1], 10, 1); // We split up to degree 18, the integrality exponent.
blocksLoc;

list blocksGlob = henselBlocks(f, 10, 1); // We split up to degree 18, the integrality exponent.
blocksGlob;

// We compare both results
blocksTrunc[2] - blocksOrig[2];  // Same up to degree 19



# Maple
H := -4*x^5*y^4+x^8+2*x^7*y-4*x^6*y^2+2*x^5*y^3+3*x^4*y^4-x^7-2*x^4*y^3+x^3*y^4-x^5*y+x^4*y^2-x^3*y^3-x^2*y^4+x^5+x^2*y^3+y^5-x^2*y^2;
F1 := y^2 + a1*x + b1*x^2 + c1*x^3 + a14*x^4 + d1*y*x + e1*y*x^2 + f1*y*x^3 + b14*y*x^4;
F2 := y^3 + a2*x + b2*x^2 + c2*x^3 + a24*x^4 + d2*y*x + e2*y*x^2 + f2*y*x^3 + b24*y*x^4 + g2*y^2*x + h2*y^2*x^2 + i2*y^2*x^3 + c24*y^2*x^4;

d := expand(F1*F2 - H);
d := simplify(d, {x^6, x^5*y, x^4*y^2, x^3*y^3, x^2*y^4, x^1*y^5, y^6});
collect(d,[x,y],'distributed');
cc := coeffs(collect(d,[x,y],'distributed'),[x,y]);
solve({cc});

coeffs(d,[x,y]);
	


LIB "polyclass.lib";
LIB "arnoldgit.lib";
ring R=0,(x,y),ds;
poly g = (y3 - x2)*(y2-x3)+y26;
determinacyBound(g);  // 35

map phi = R,x+y^2+x^2+x*y+x^2*y+x*y^3-x^6*y^100, y+y^2+2*x^2+x*y+y*x^2+y^2*x+x*y^4+x^2*y^123;
poly gOrig = phi(g);
gOrig = substitute(gOrig, x, x+y);
//gOrig = monic(gOrig);  
determinacyBound(gOrig);  // 35


LIB "polyclass.lib";
LIB "arnoldgit.lib";
ring R=0,(x,y),ds;
poly f = (y3 - x2)*(y2-x3)+y6;
determinacyBound(f);  // 5


LIB"integralbasis.lib";
ring R = 0, (x,y), dp;
poly f1 = (y3 - x2)*(y2-x3)+y6 + x6 + x5y + 100xy5 + 200x2y4;
list l1 = puiseux(f1,5,1,2);

poly f2 = (y3 - x2)*(y2-x3)+y6;
list l2 = puiseux(f2,5,1,2);

l1[1][1]-l2[1][1];

list ib1 = integralBasis(f1, 2, "atOrigin", "opti1", "locBasis");
list ib2 = integralBasis(f1, 2, "atOrigin", "opti1", "locBasis");


// Factor at the origin
poly f0 = subst(f, x, 0);
list fl = divideBy(f0, y);
list fGlob = henselGlobal(y^fl[2], fl[1], f, 10);


list blocks1 = henselBlocks(f1, 10, 1); // We split up to degree 18, the integrality exponent.
list blocks2 = henselBlocks(f2, 10, 1); // We split up to degree 18, the integrality exponent.
blocks1;
blocks2;



LIB "polyclass.lib";
LIB "arnoldgit.lib";
ring R=0,(x,y),ds;
poly f = (y11 - x2)*(y2-x3)+y12;
determinacyBound(f);  // 


LIB"integralbasis.lib";
ring R = 0, (x,y), dp;
poly f1 = (y11 - x2)*(y2-x3)+y12 + x12 + x11y + 100x6y6 + 200x7y5;
list l1 = puiseux(f1,5,1,2);

poly f2 = (y11 - x2)*(y2-x3)+y12;
list l2 = puiseux(f2,5,1,2);

l1[1][1]-l2[1][1];

list ib1 = integralBasis(f1, 2, "atOrigin", "opti1", "locBasis");
list ib2 = integralBasis(f2, 2, "atOrigin", "opti1", "locBasis");
ib1;
ib2;

reduce(ib1[1], groebner(ib2[1]));
reduce(ib2[1], groebner(ib1[1]));

// Factor at the origin
poly f0 = subst(f, x, 0);
list fl = divideBy(f0, y);
list fGlob = henselGlobal(y^fl[2], fl[1], f, 10);


list blocks1 = henselBlocks(f1, 10, 1); // We split up to degree 18, the integrality exponent.
list blocks2 = henselBlocks(f2, 10, 1); // We split up to degree 18, the integrality exponent.
blocks1;
blocks2;
